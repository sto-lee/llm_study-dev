{
  "video_url": "https://www.youtube.com/watch?v=cjCYcTPryw8",
  "video_id": "cjCYcTPryw8",
  "title": "Build AI Function Calling with LangChain & Advanced AI Models",
  "upload_date": "20241021",
  "channel": "IBM Technology",
  "duration": "6:37",
  "caption": "Hi, my name is Erika and this is how\nto build function calling with watsonx.ai. Step one is setting up your environment. Check out this video\nto set up your IBM account and get your API key\nand project ID credentials. Step two installing relevant libraries. We'll need a few packages\nfor this tutorial. Make sure to install the following\nlibraries. Step three importing libraries\nand setting up our credentials. Next, we'll import the following packages. For this tutorial, the API request\nwill require bearer authentication. To get our bearer token, we need to run\nthe following commands in our terminal and insert our watsonx\nAPI key from step one here. The token will begin with bearer\nand will be followed by a long string of characters. It should look something like this. Note that this token expires\nan hour after generation. Next, we can prepare our environment\nby setting the model ID for the granite three eight,\nthe instruct model, the URL needed for making Watson\nAccess API requests, and the tokenizer for the granted 20b function calling model. To set our credentials,\nwe'll need the project ID we generated in step one and the bearer token output\nfrom the previous commands. The Get stock price\nfunction in this tutorial will need an AV stock API key to get a free\nAV stock API key. Please visit the Alpha Vantage website\nand fill out this form. And finally, the get current weather\nfunction requires a weather API key. To generate one, please create an account at home.open weathermap.org/users/signup. After creating an account, select\nthe API keys tab to display your free key. Please store all four of these\nprivate keys in a separate env file in the same level\nas your directory for this notebook. Step four defining the functions. First, we'll write the get stock price function, which uses the stock market data\nAPI from Alpha Vantage. Given a ticker and the date,\nit returns the high and the low prices for that ticker on a given day. Next, the current weather function\ngets the real time weather in a given location using the current\nweather data API from open weather. Step five setting up the API request. Now that we've defined our stock\nand weather retrieving functions, let's make a third function to make a Watson\nAPI request for a set of instructions. We'll use this function\neach time we make an API request. Finally, let's create a list of the two\navailable functions to call. Here we declare our function definitions,\nwhich require the function names, descriptions, parameters,\nand required properties. The model will use function\ndescriptions and function parameters to determine the relevant\nfunction to call. Step six performing function calling. First, let's call the get stock price function\nto prepare for the API request. We'll set up our query and a JSON list\nof available functions for payload use in the tokenizer chat template. Here's what our payload looks like. Next, we'll use our tokenizers apply chart template\nto create our first set of instructions. Apply chat template is useful\nfor breaking up long strings of texts into one or more messages\nwith corresponding labels. This allows the LLM to process\nthe input in a format that it expects. Since we want our output\nto be in string format, we can set the tokenize parameter\nto false. The add generation\nprompt can be set to true to indicate the beginning\nof an assistant message to the output. This will be useful when generating\nchart completions with the model. Here's what our instructions look like. Now we can call the make\nAPI request function and pass through the instructions. We just need. And here's the API response. As you can see by the function call\nname in the JSON object in the output, the correct function get stock price was selected from the set of two available functions. Now to run the stock price function,\nlet's extract the necessary arguments from the output. Here are the arguments. We'll use the ticker and the date with the function\nname, ticker and date extracted. We can set these variables\nand call the function to call the function\nusing its name as a string. We can use the global function. We see in the output that our function ran\nand returned the low and high stock prices for IBM on October 7th, 2024. To make a clean final response with our granite model, we can pass another prompt along with the information collected from function calling. And here's the final clean response from our model. Finally, let's use our Get current Weather function to ask about the current weather in San Francisco. We can follow the same steps as before, but adjust our query to what is the current weather in San Francisco? Our payload looks almost the same as our previous payload, with the exception of our new query. Let's make our instructions again using apply chart template. Here's what our instructions look like. Now, like we did before, we call the make\nAPI request function and pass through the instructions we just made. Here's the API response. As you can see, the model\npicked the correct function to use. Get current weather\nfrom the set of two functions. Now to run, the weather function will fetch the needed arguments\nfrom the output. Here's the argument we'll use the location. Now let's call the function\nwith the argument generated by the model. The function correctly describes\nthe current weather in San Francisco. And to complete, let's generate\nthe final response of this function. And here is the final response\nfrom our model. To summarize, in this tutorial,\nwe built two custom functions and used the granite 3.08 instruct model\nto determine which function to call based on key\ninformation from user queries. With this information, we call the function with the arguments from the model response. These function calls produce\nthe desired output. Finally, we call the granted 3.08b\ninstruct model again to synthesize the information returned by the functions."
}