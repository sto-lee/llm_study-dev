{
  "video_url": "https://www.youtube.com/watch?v=Q5aTUc7c4jg",
  "video_id": "Q5aTUc7c4jg",
  "title": "SQL vs. NoSQL: What's the difference?",
  "upload_date": "20210923",
  "channel": "IBM Technology",
  "duration": "6:06",
  "caption": "Hmm…SQL versus NoSQL? You'll be surprised \nto know that this conversation comes up   more than often than you think. Hello, my name is \nJamil Spain, Brand Technical Specialist with the   U.S. Financial Services market. And as you try to \npick a side on how you want to choose to use SQL   or NoSQL databases, I thought it would be great \nfor me to bring out my top five differences to   really give you the information you want to back \nup your decision. So let's get started with this.   When it comes to SQL, we know that this works off \na relational database structure here. Now that   means that you're going to access all your data \npoints, they have to have some type of relation,   you've got to do a lot of pre-work to kind of \ndecide out your structure, how they're going   to relate. Whereas on the NoSQL side this is \nnot relational. So, we really don't have to,   I really feel for a lot of projects. I can go ahead \nand get started and deal with a lot of that effort   later on in the process here. As your database \nkinda checks, and gets a lot of traffic and needs   to really start to grow, on the infrastructure for \nSQL servers they're going to vertically scale. Okay. Whereas on the NoSQL side these \nare going to be horizontal scaling. All right, um and we know that SQL servers \nare going to be backed by this they're going   to need more memory, more computing power to \nactually process all these transactions. Whereas   horizontally with NoSQL it's all in memory, I can \nkeep adding secondary nodes to handle and balance   out a lot of the usage there as well. On the \nSQL side when I kind of talk about my structure   it's really going to be always \nabout table, being table based. I am super concerned about how \nI’m categorizing my entities, my,   my tables into records and how I’m doing my \nrelationship. So I have to kind of think of a, I like   to say more of a warehouse kind of nature that \nI’m collecting all this data here as well. And   we all know from NoSQL it is based on a document \napproach. So these are really going to be documents,   all right. They can be key value hashes, this is \ngreat for GraphQL, I mean a lot of the graphs, okay.   It's really meant to not really have any kind \nof structure, it's kind of the opposite of being   a table based I can fit pretty much anything \num in this as well. So what about when you want   to access all the data? I’m going to have to use \nthe SQL query language to actually define all my   queries to pull all my data out so it's kind of \nsome pre-planning about how I’m going to access   and join my data if I’m going to normalize all the \ndata there. Where I feel the NoSQL is definitely   much, much more dynamic. All right. I’m really able \nto, really just make my collections of these   type of documents no matter what the structure \nand then I can have more freedom to let it flow   and how I want to query these items as well. So \nlastly SQL great for multi-row transactions. Where we have our tables, we have a lot of data \nthat we want to put in, remember the ability to do   the transactions and being able to roll back and \nforth so I can really control a lot of what the,   what goes in. On the other side with NoSQL we \nremember that this is going to be all unstructured. Usually it's JSON, it's very great for working \nwith JSON. Let me make sure I write here on   number four that was also dynamic.  All right. So the unstructured JSON versus something that   is a very planned out, I specifically want to \nenter this in as well. So that kind of ends the   features between the two, but actually I can \nthink of a scenario where this actually is an   \"and\" that should be here as well. Do we really \nhave to make a definitive choice of either or?   One of those scenarios goes \nto the fact that I can have,   let's say I have a common e-commerce application \nwhich is usually composed of some bit of mobile and has some interaction with a more of a back-end, \nwhether it's an API that wants to kind of go   we want to commit a lot of the data. Think about \na shopping cart, okay. Let's kind of visualize   this for a minute. As I make sessions, I browse, \nI do all these things, it's more like data in   transient it's not really ready to be committed \nyet. So, I could see unstructured session data,   product data, what I clicked on set of clicks all \nthat stuff could be great for compiling into any   structure into a NoSQL site. And then as I make the \norder or the transaction that could be definitely   something that I kick off into my SQL database \nback in where I want to facilitate interaction   with different departments, not only is it going \nto the shipping department, maybe the marketing,   maybe a couple other subsystems that I want to \ndocument that order has been placed and kick off   a few other work streams. So, this is just \none of many scenarios that you can choose.   I'll be curious to know in the future whether you \npick a side, or you join forces to power your next   application. Thank you for your time. If \nyou have questions, please drop us a line   below. And if you want to see more videos like \nthis in the future, please like and subscribe."
}