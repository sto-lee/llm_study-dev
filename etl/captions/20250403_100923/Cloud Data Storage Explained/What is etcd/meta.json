{
  "video_url": "https://www.youtube.com/watch?v=OmphHSaO1sE",
  "video_id": "OmphHSaO1sE",
  "title": "What is etcd?",
  "upload_date": "20200825",
  "channel": "IBM Technology",
  "duration": "6:17",
  "caption": "How can you ensure that your data is\nstored consistently and reliably across a distributed system?\nMy name is Whitney Lee and I'm a Cloud Developer here at IBM.\netcd is an open source key value data store\nused to manage and store data that help keep distributed systems running.\netcd is most well known for being one of the core components of Kubernetes,\nwhere it stores and manages Kubernetes state data, configuration data,\nand metadata. etcd can be relied upon to be a single source of truth at any\ngiven point in time. Today I'm going to go over some of the\nfeatures of etcd that allow it to be so effective in this way. etcd is fully replicated. This means that every node in an etcd\ncluster has access to the full data store.\netcd is also reliably consistent. Every data read in an etcd cluster is\ngoing to return the most recent data right.\nLet's talk about how this works. etcd is built on top of the Raft algorithm\nthat is used for distributed consensus. So, let's make a very simple etcd cluster\nof only four nodes. An etcd cluster always has a leader\nand then the other nodes in the cluster are followers.\nIt's a key value data store, so in this case at key one we have the value of\nseven. Let's say a web application comes in and lets the leader node know at key one\nwe want to store the value of 17 instead of 7.\nThe leader node does not change its own local data store,\ninstead it forwards that request to each of the followers.\nWhen a follower changes its local data store\nit returns that to the leader, so the leader knows.\nWhen our leader node can see that the majority of the nodes\nhave been updated to the most current data that's when the leader will update\nits own current data store and return a successful write to the\nclient. Now client doesn't actually have to\nconcern itself about which node in the cluster is the\nleader. The client can make read and write requests to any node in\nthe cluster. So, let's say, this all happens over a\nmatter of milliseconds, but let's say that the client makes a\nread request to the node that hasn't updated yet\nand says what's the value at key one? Well this follower node knows it's\na follower node and knows it's not authorized to answer the client directly.\nSo what it's going to do is forward that request into the leader node\nwhich will then respond the cluster's current value at key 1 is 17.\nAnd so it will get a response of 17 to the client.\nAnd that's how etcd is replicated. So every every node in the cluster\nhas access to the full data store and it's consistent every data read is\ngoing to return the most recent data right.\netcd is also highly available. This means that there's no single point\nof failure in the etcd cluster. It can tolerate gracefully tolerate\nnetwork partitions and hardware failure too.\nSo, let's say that our leader node goes down.\nThe followers can declare themselves a candidate,\nthey'll hold an election where each one votes based on availability\nand a new node will be elected the leader.\nThat leader will go on to manage the replication for the cluster\nand the data is unaffected. etcd is also fast. etcd is benchmarked at 10,000 writes per\nsecond. With that said, etcd does persist data to\ndisk. So, etcd's performance is tied to your\nstorage disk speed. etcd is secure.\netcd uses transport layer security with optional\nSSL client certificate authentication. etcd stores vital and highly sensitive\nconfiguration data, so it's important to keep it protected.\nFinally etcd is simple to use. A web application can read and write\ndata to etcd uses a simple http JSON tools. So the other thing to talk about in etcd\nthat's important is the watch function. Kubernetes\nleverages this. So, as i talked about at the beginning,\netcd stores Kubernetes configuration data and its state data. So, etcd can use this watch function\nto compare these to each other. If they ever go\nout of sync, etcd will let the Kubernetes API know\nand the kubernetes API will reconfigure the cluster accordingly. etcd can be used to store your data\nreliably and consistently across your distributed system.\nThank you. if you have questions please drop us a line below.\nIf you want to see more videos like this in the future, please like\nand subscribe. And don't forget you can grow your skills and earn a badge with\nIBM CloudLabs, which are free browser-based, interactive\nKubernetes labs."
}