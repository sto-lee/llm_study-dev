{
  "video_url": "https://www.youtube.com/watch?v=b_euX_M82uI",
  "video_id": "b_euX_M82uI",
  "title": "Container Security Explained",
  "upload_date": "20201030",
  "channel": "IBM Technology",
  "duration": "6:51",
  "caption": "As you are modernizing your enterprise, how do you mitigate the risks and vulnerabilities associated with transitioning into a container architecture? Hi, my name is Charles and I'm a Cloud Developer here with IBM Cloud. Today, I'm going to give you a general overview\nand an introduction to how you can begin to secure your container environment. Let's say that you're an enterprise and\nyou're using VMs to host your application code and you want to transition\ninto using containers. Containers are really great\nbecause they allow you to smoothen the application development pipeline\nand they can be deployed just about anywhere. However, because of this flexibility of\nbeing able to deploy just about anywhere, a whole new variety of attack services\nexist surrounding the container environment. Some of these include the images that you use\nto build your containers; the image registries that we use to store our images\nin; the container run times which we use to execute our containers. And, the orchestration platforms which we use to manage the lifecycle of\nmultiple containers with. And lastly, the host OS which manages the Docker\nclient and the Docker daemon and the kernel of which is shared with our\nrunning Docker containers. So, when we look at images as a potential\nvulnerability, one of the best things that we can do to address this\nvulnerability is to make sure that we're keeping our images up to date. And the reason this is so\nimportant is because images that are up to date typically have the latest\nsecurity patches which protect you from the latest vulnerabilities that they track. We also want to make sure that we're regularly\nscanning our images so that we can keep track of any new vulnerabilities that\nmay not have already been caught. And we also want to make sure\nthat we're signing our images. And signing an image will essentially create\na digital fingerprint that you can use to cryptographically test\nand verify whoever it was that was trying to manipulate the image with. Now, image registries are a potential\nvulnerability, because they contain all of these images which contain\nyour application code. And so in order to keep them\nsecure, you want to make sure that you're keeping your image registries\nprivate and a private registry really is one that gives you absolute control over\nthe types of images, how many images and the access control of the users\nthat are accessing the registry. You also want to make sure that you're\nregularly monitoring your registry so that you can track any vulnerabilities\nthat may come about, and you want to make sure that the host server for the registry\nis secure so that you can protect it from being compromised and\nyou can protect your images and the application code from being accessed. When it comes to the container run time,\nrun times can be a little bit tricky because historically security tools related\nto containers monitor more the communication around them rather than what's happening inside. So, one of the best things you can do is to\nmake sure that you're app security is up to par and you also want to make sure that you\nare monitoring your network protocols and your network payloads. You also want to make sure that\nyou're monitoring the host as well. When it comes to orchestration\nsoftwares, these are platforms such as Kubernetes or container\nplatforms like OCP. And what's great about these is that they\ninclude lots of access control capabilities which means that you can easily set limits\nnot just on the number of privileged users that you have -- which is\nan important thing to do -- but also the amount of privilege that you give\nany one user so that if the user is compromised, they're not able to attack your\nentire orchestration platform. You also want to make sure that you are\nmonitoring your orchestration platform as well. And that you're monitoring the pod\ncommunication within the orchestration platform. When it comes to the host OS, this is\npotentially one of the greatest vulnerabilities that you can have in your container\nenvironment because the host OS if compromised will give the\nattacker essentially access to your entire application environment. So, in order to help to mitigate\nthis, it's good to have a slim OS, something like SE Linux is a great option. You also want to make sure that you have access\ncontrol implemented within your OS and you want to make sure that you're also\nregularly monitoring the OS as well for any vulnerabilities to\nprotect it from being compromised. And so these are the a few of the\npotential vulnerabilities that exist in the space surrounding your container. When it comes to protecting the container\nitself, there's a lot of great open source tools that exist and one of them falls\nunder the category of scanning. It's sort of the de facto option\nwhen it comes to scanning tools for containers and it's called Docker Bench. And Docker Bench is great because it's\nreally just a simple script that runs and it will test your container against dozens of different container production\ndeployment best practices, and it will let you know how\nyour container does against it. Open Scap is another great option which it sort\nof will collect and analyze different...oh, sorry, it will allow you to create schedules\naround continuous scanning for your container. Now, when it comes to monitoring tools, a\nreally great option is called Prometheus, and Prometheus is great because\nthis one will allow you to collect and analyze different metrics around\ncommunication between different node end points. Lastly, when it comes to firewall tools, Cilium\nis a fantastic option because it will allow you to analyze communication in your\nnetwork and also the communication between all the different\napplication services that you have. So, just to recap. We've gone over a few of the\nvulnerabilities that exist in the environment around the container and then we've gone\nover some really great open source tools that can help to secure your container. Thank you. If you have questions, please\ndrop us a line below. If you want to see more videos like this\nin the future, please like and subscribe. And don't forget, you can grow your skills and\nearn a badge with IBM Cloud Labs which are free, browser based, interactive Kubernetes labs."
}