{
  "video_url": "https://www.youtube.com/watch?v=QAbqJzd0PEE",
  "video_id": "QAbqJzd0PEE",
  "title": "PaaS Explained",
  "upload_date": "20191122",
  "channel": "IBM Technology",
  "duration": "6:38",
  "caption": "Hi, I'm Tessa Rodes and I'm a designer on IBM Cloud and today we're going to talk about Platform as a Service (PaaS), and it's hard to define Platform as a Service without talking about its neighbors, Infrastructure as a Service (IaaS), and Software as a Service (SaaS). So, let's start with the foundation here with IaaS. IaaS is a set of compute, networking, and storage resources that have been virtualized by a vendor so that a user can access and configure\nthem any way they want. In design we have a concept of talking about users called personas, and the persona for IaaS is a System Admin, or an IT Admin. Let's jump up to the top with Software as a Service, that's the easy one. Software as a Service is just software that you don't have to install on your machine and you don't have to manually update and so the user for Software as a Service\ncould be anyone. In fact, if you're watching this on YouTube right now then you're a user of Software as a Service. It's usually charged on a subscription\nmodel rather than a one-time license fee. And that brings us to Platform\nas a Service, PaaS takes advantage of all the\nvirtualized resources from IaaS and then just obstructs them away so the\nuser doesn't have to worry about managing any of those virtualized\nresources. The user for PaaS is not a System Admin usually, it's usually a Dev.\nIn IBM we call this Dev \"Jane\", that's the name of our persona. And so this whole\nmetaphor, the pyramid metaphor, is meant to indicate that as you move down you're\nincreasing complexity in terms of your knowledge and and management of\ninfrastructure resources and you're increasing the ease of use. Another\nmetaphor I use when I'm talking to the designers on my team about PaaS is\nhaving to do with a car. So, in this metaphor IaaS is like leasing\na car. So, if you've got leased a car you probably did a lot of research and\nyou care about the specs of the car and the performance,\nyou care about the color of the car, what kind of car it is. You're the one driving and\nyou're paying for it. You're also paying for the gas and any tolls or maintenance.\nWith Platform as a Service in this metaphor that's more like\nrenting a car. So, say you're on vacation and you just got out off the Airport and\nyou're going to pick up your rental car, you don't really care what color it is,\nyou don't even care about the specs of it, but you're still driving and\nyou're paying for the gas and any tolls you go through. Software as a Service is\nagain the easiest one. That one's more like getting a taxi, or an Uber. So, with the\ntaxi or Uber you don't care at all about what kind of car it is, what color\nit is, and in fact you're not even the one driving or paying for gas or any\ntolls because that's baked into the price. So, let's think about what that\nmeans in terms of cloud computing and what the vendor provides and what the\ndeveloper, or \"Jane\", provides. So, the vendor provides servers, storage,\nnetworking, virtualization, middleware, the operating system, and the runtime. All\nthat leaves for the developer to provide is their data and applications. So, this\nis and this is the vendor, cloud vendor. So, there are some pros and cons with\nthat just like with leasing, renting, or getting a taxi. The pros for using\nPlatform as a Service are generally assumed that it's\nquite fast and easy to get an app up and running which is great. It's easy to\ncreate and delete the resources which is important for say you're running a\nproof-of-concept app for a conference and you want to spin it up right before\nthe conference and then delete it right after, you're not paying for the whole\nmonth and it's easy to spin it up and delete it.\nAlso, that really results in some cost\nbenefits. Another cost benefit of Platform as a Service is that you don't\nhave to pay for a full time system or IT admin to run this app, they can\nfocus on something else. And another Pro is that a lot of providers of\nPlatform as a Service have been building out some tools on their platform. So, you\ncan use DevOps tools, collaboration tools, and there's a lot of API marketplaces\nthat have been coming out which is great because you can just take those services\nand plug them into your app, again still without having to worry about any of\nthis. There are some Cons to using Platform as a Service. This big one is\nlack of control but some people will still say that that is a Pro because\nalthough some people like to pull all the levers and push all the buttons\nhaving to do with fine-tuning their infrastructure, a lot of people don't\nwant to have to worry about that, nor do they have the understanding or ability\nto do that. Another Con is the vendor lock-in, it's a little bit hard to\nmigrate your app unless you're using an open-source framework like Cloud Foundry,\nit's a little hard to migrate Platform as a Service app from one cloud\nto another. So make sure you trust and like your cloud provider before you\nchoose it. And then finally the performance at scale can be an issue. Performance at scale, so say Jane the\ndeveloper had a Platform as a Service proof of concept app from that\nconference, and then she released it to 10,000 people the next day. It definitely\nwon't have the same in and out performance as if it was running on a\ndedicated bare metal server for example. So, that's a consideration to have. So, I\nhope that helps you understand the benefits and the reasons for choosing\nPlatform as a Service. Thanks for watching. If you have questions please\ndrop us a line below. If you want to see more videos like this in the future \nplease like and subscribe and don't forget you can always get started on\ncloud at no cost by signing up for a free\nIBM Cloud account."
}