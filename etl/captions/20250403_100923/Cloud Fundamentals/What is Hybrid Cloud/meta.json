{
  "video_url": "https://www.youtube.com/watch?v=sUoeVhbp4cQ",
  "video_id": "sUoeVhbp4cQ",
  "title": "What is Hybrid Cloud?",
  "upload_date": "20210427",
  "channel": "IBM Technology",
  "duration": "9:45",
  "caption": "Hey everyone, today let's talk about hybrid cloud. \nNow by the book it refers to a cloud computing   architecture with two or more environments \nconsisting of public and private clouds,   on-premises, and these days \neven edge environments.   But without the right strategy, hybrid cloud \ncan actually pose a number of challenges.   Now today we're going to go through an example to \nlay out some of those advantages and disadvantages   of a fictional distribution company \nthat started to undergo that hybrid   cloud transformation process. Now we're going to \nstart with what they have kind of on-premises.   Now right off the bat let's start with \nthis legacy application that they've got.   Now this is an application that enables their \nusers to get shipment and tracking information   and it continues to work so they don't really \nhave a good reason to modernize it, although   it is kind of running on some legacy, old school, \nlet's say Java EE based monolithic architecture.   In addition, they've also got some customer \ndata that's running on-premises. Now this is   one of the key advantages of hybrid cloud is \nit lets you run workloads where you need them.   So in this particular case to comply with GDPR \nor maybe some other regulations they need to   keep that data on-premises which is actually a \npretty cool advantage of hybrid cloud that they   can continue to do that. Now, they've also \ngot some HR software running on-premises,   we're going to call this BPMS, or \nbusiness process management software,   and this is going to allow their customers to \ndo or rather their workforce to do things like   requesting time off, or maybe you know doing \nsome purchase work orders that kind of thing.   So that's what they've got on-prem. Now we \nmentioned that they've started the hybrid cloud   transformation, they started to take advantage \nof cloud native, so let's see what they've done   in the public cloud. Now we've distilled the cloud \ninto kind of three major categories in the past,   so Infrastructure as a Service, Platform \nas a Service, and Software as a Service.   Now, let's start with PaaS and what they've done \nhere is they've taken advantage of a Kubernetes,   or container-based environment, maybe even \nsomething like managed OpenShift running in   the cloud to create a new version of the same \napplication we talked about before the one one   that works for mobile users. So mobile backend \nas well as a database there that kind of works   for mobile users to be able to get tracking and \nshipment information. But this led to an increased   cost and support to maintain all those users, so \nthey started to take advantage of another service   available in the cloud. So here's where SaaS \ncomes in. They took a chat bot and they built   it into that application and that enables them \nto offset some of that increased support costs.   In addition, let's say they're also using \nsome of the SaaS capabilities for IoT   for their delivery drivers, maybe in their \nwarehouses, their distribution centers, that kind   of thing. So IoT is helping you know track the \ngoods and maybe making sure they're temperature   controlled, that kind of thing. And finally, for \nIaaS, here's an environment that I think kind of   benefits from lift and shift. So some of \nthat business process management software   that they've got running on-prem. Maybe they've \nmigrated some of that software over to the cloud,   and I think that's an excellent opportunity to \nstart taking advantage of IaaS is by kind of doing   that lift and shift, taking advantage of some of \nthat software and moving it there. Maybe they're   also running some CMS systems like WordPress for \ncontent management and they're running that as   software on some VMs that are made available \nthrough the IaaS capabilities in the cloud.   Now those two environments are integrated together \nbecause you know they've got some shared data,   obviously the web interface and the mobile \nbackend were probably using a similar   data source. Finally they've also got edge \nenvironments, so these are going to be things   like distribution centers. They're called edge \nenvironments because they're at the edge, they're   where data is being created and these distribution \ncenters basically enable the customer to do things   like kind of run workloads right where the data is \nbeing created. So maybe something like Kubernetes,   or again OpenShift, a distribution of Kubernetes \nto manage the edge workloads where data is really   being created. And those are obviously going \nto be integrated to the on-premises and cloud   environments to share data about shipments so \ntheir users are getting the latest and greatest   information about you know where that shipment \nis. So this is where the the company is today   and they've run into a number of challenges. \nSo number one, they have increased complexity.   So as they've gone from on-premises to the cloud \nand all these engine environments now they have   kind of an increased number of environments, \nso their ops teams have to maintain that.   In addition, they need a way to port assets \nfrom one environment to another. So, so far   they haven't necessarily run into any issues but \nthey're starting to build a chat bot into the   mobile backend and say hey maybe we should start \ntaking advantage of that on our web application   as well. And they're finding they're not able to \neasily do that, their DevOps teams are struggling   because their assets aren't quite portable, maybe \nthey have multiple vendors they're working with   there isn't that consistency. And the \nlast concern I'll raise is security,   more environments, higher surface area of attack, \ntheir security team has to kind of invest more   resources to help maintain these solutions. So \nthere is a solution to all of this and it's taking   on a unified and open hybrid cloud approach and \nthat's going to start at the infrastructure layer   that we've already talked about a little bit. So, \nthat infrastructure layer is going to be things   like the on-premises environment, on-premises \nenvironment, it's going to be public and private   cloud environments, as well as edge locations. \nBut here's where the key piece kind of starts to   kind of work out. So at the foundational layer \nthey need to start building some standardization.   So here's where they can start building in a \nconsistent operating system. So, something like   Linux, or RHEL, or Red Hat Enterprise Linux, is \ngoing to help here because their developers can   work against a single operating system \nacross these multiple environments.   And I mentioned RHEL because that brings me \nto my next point here the platform layer. And here's where they're going to be \nrunning something like Kubernetes.   Kubernetes is great because it gives you \nthat consistent container based environment   that works in any kind of location on-premises, \nedge, the cloud, but you can even take it a step   further with OpenShift container platform which \nis going to give you that enterprise supported   approach to containers, and again, \nit's great because it runs anywhere.   Finally, the key to all of this is the solutions. \nSo this consistency and standardization enables   customers to focus on standardized solutions \nacross the board so this can be things like the   apps that they're developing, or the data that \nthey need to manage, or even security solutions   that they're building across the board. And this \nis just scratching the surface there's other use   cases here that I'm not even diving into. Things \nlike integration, managing these multiple cloud   environments, automation, that kind of thing. But \nthis standardized layer and platform enables them   to focus on solutions that work across the \nboard. Now this is going to lead to a number   of advantages. Now the number one thing about \nhybrid cloud is that it needs to be portable.   That means your workloads need to be able to move \nacross environments. Now we mentioned they've got   a monolithic legacy application architecture \non-prem, maybe they start pulling in OpenShift,   or Kubernetes on-premises, start refactoring into \nmicroservices and cloud native based applications,   and they start having containers for that web \ninterface application. Now if they want to they   can start porting those assets to the cloud \nand take advantage of the elasticity there to   scale up and down on demand. Number two, it's \ngoing to be faster innovation. Now with that   portability their developers can now think in a \nnew way they can build once and deploy anywhere.   So that chatbot experience they built for the \nmobile backend they're going to be able to   readily port that to the on-premise experience to \nthe web user interface experience, the legacy app   if they modernize it to kind of container-based \narchitecture. So that's one of the key advantages   their developers are going to benefit from faster \ninnovation, reduce time to value, faster go to   market by taking advantage of the industry's \nbest, you know DevOps and agile practices. So,   that's a key part about a hybrid cloud is faster \ninnovation. And finally, as we mentioned before on   the security front with that standardized layer of \nthat OpenShift or Kubernetes that container-based   environment across the board. You're going to \nhave consistency for things like pushing out   compliance policies to these multiple environments \nand that's going to be critical here to make sure   you have that kind of secure and consistent \napproach across these multiple environments.   Now in the interest of standardization \nand standardization across the board   and having that kind of consistent layer. \nImagine if you could handle all of these   layers, right, infrastructure foundation and \nsolutions all from a single say public cloud   environment. That means extending the public \ncloud to not just on-premises environment but   maybe even other clouds and the edge. \nWell that's when we're starting to get   into the concept of Distributed Cloud, so \nI urge you to check out my video on that.   Now with Hybrid Cloud it's going to be paramount \nthat you take a unified and open approach to truly   set yourself up for success. If you enjoyed this \nvideo, have any questions be sure to drop a like   or comment below. Stay tuned and follow us for \nmore videos like this in the future. Thank you."
}