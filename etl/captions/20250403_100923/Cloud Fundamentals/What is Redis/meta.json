{
  "video_url": "https://www.youtube.com/watch?v=muqiHwa8UvQ",
  "video_id": "muqiHwa8UvQ",
  "title": "What is Redis?",
  "upload_date": "20210831",
  "channel": "IBM Technology",
  "duration": "4:44",
  "caption": "Are you planning out your next application \narchitecture and don't know if you want to try   something new? As cloud native developers we often \nhave to make decisions about what to use on our   front-end, back-end, and that middle tier which must \ninclude some choices around databases here. For   today's topic, I want to talk through Redis as your \nnext pick for your database technology here. Hello   my name is Jamil Spain. I'm a Brand Technical \nSpecialist in the U.S. Financial Services Market.   When I made my decisions on how to solution \nRedis in my architectures, I used three simple   categories to categorize their importance and how \nit rates for me and, they were the flexibility   that it offers me, the implementation ,how easy \nis it to implement, and of course the deployment,   the most important thing. Now one thing to keep \ntop of mind about Redis is that it is an in-memory data store. That's to say that everything you put in sits in \nmemory so it has very, very quick and easy access   to it, but the role that it plays great is as a \ncache, and it can also function as a full-fledged   data store if you would like to. And of \ncourse if you want to dig even deeper   there are certainly some messaging capabilities \nthere as well. Now, when we talk about cash what   exactly do you mean? Well, that can be any type \nof structures from strings, to hashes, to lists.   I think we all get the picture about what can \nfit uh definitely into this database there,   and in your architecture, and when i think about \nit as a mobile, developer web, developer, myself,   in practice, I know there are some times when I \nwant to just put a set of data somewhere quickly   to access it later, and this is really where \nthis shines, and so it really helped me to know   categorize it when I needed a quick place to cache \nsomething very, very easy Redis was a strong check   mark uh there as well. Let's actually put a check \nmark there now implementation there are certainly   all types of SDKs are available from C \nto JavaScript, I'll just do J.S., to Java,   to Python. Be sure to check redis.io for all \nthe SDKs that are available, but that was a very   important factor to me. Depending on the \nlanguage of choice that I want to develop, with   how easy is it to actually integrate and implement \nthe infrastructure there, the data structures that   I want to save? Also, one thing that was a big \nbonus for me is that Redis can also is compatible   with a lot of IoT architectures. Whether that's \nthe Raspberry Pi, I'll do some abbreviation here,   and also or any other armed base solutions there \nas well. It also means that it's really relatively   easy to implement as a supporting program \ninto a lot of architectures that I want to do,   and then finally, how does this work for \ndeployment? Well I make my decisions in dev.   How is it for easiest for me to make single \ninstances to prove out my case, of course and see how it works and how it functions, but \ndefinitely as I get something more mature and   I want to advance up to my production \nor more production level instances here   it works off the traditional main node and \nsecondary node model. One thing of note here is,   that what I did like about this is \nthat as you publish to the main node, it will do automatic caching replication to the \nsecondaries. That's not something that I really   have to worry about, and I can scale out adding \nmore and more replicas, secondary nodes there as   I need to to ensure the resiliency, and that it \nwill always be available. As we know we want to   make sure if we leverage this as a strong \ncomponent of my architecture for caching,   I want to make sure it's going to be resilient \nand be up from there. Check mark there. Now   this is just an entry conversation into Redis \nas your database choice, feel free to check   redis.io for more. Thank you for your time. If \nyou have questions please drop us a line below,   and if you want to see more videos like this \nin the future please like and subscribe."
}