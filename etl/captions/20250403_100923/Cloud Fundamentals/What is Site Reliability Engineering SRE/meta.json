{
  "video_url": "https://www.youtube.com/watch?v=ztIIcXNzMN4",
  "video_id": "ztIIcXNzMN4",
  "title": "What is Site Reliability Engineering (SRE)?",
  "upload_date": "20210507",
  "channel": "IBM Technology",
  "duration": "8:12",
  "caption": "Thank you for joining us today! My name is Bradley Knapp, and I'm one of the product managers here at IBM Cloud and we've come to answer the question: what is Site Reliability Engineering, or SRE? And SRE is really the name for a new discipline \nthat's actually an old discipline.   It's a new name, it's only been around 15, 18 years, but the job itself has been around for a very long time. It's just evolved over time, and now we've given a formal name to the discipline and the job. And so, the question is, what is SRE, \nwhat is site reliability engineering? And so, the way that I like to describe it is that it's really the collision of the \ntraditional IT role and DevOps, right? So, back in the day, in the traditional IT \nrole, you would think about lots of people sitting in an operations center staring at very \nlarge screens, kind of arranged in a semicircle, like a mission center, or a \nwatch center in the military. Well, that world doesn't so much exist anymore, and in the new world, in the DevOps cycle that everyone should be embracing for their software releases, you still have to have reliability. Your developers are still going to engineer \nthe software to be reliable, but when it comes to actually operating it actually delivering \nthe service that goes out to the end customer, that's really kind of outside of the responsibility of those software developers. That's where SRE comes in. An SRE is what I like to call a 50/50 role, right? SREs should spend about 50% of their time focusing on solving customer issues. That can be escalations, could be responding to incidents, dealing with an upset customer who \nneeds help on a tactical problem. That's going to be 50, and then the other 50%   is maybe the most important part, and \nthat's every SRE should be actively   trying to automate themselves out of a job. \nThey want to automate all of the things. The buzzword for this is reducing toil \n, right? Reducing all of the manual work   necessary to keep any kind of \nsoftware environment up and running. This includes the hardware itself, \nit includes all of the middleware,   it includes the software - all of the related \nservices you have to keep these things live. And so, the question then becomes: all right, \nwell, we're going to automate these things,   isn't that putting my job at risk \nif we get rid of these manual tasks? And the answer is: in reality, no it's not. \nIt's never going to put your job at risk,   because every time you automate something, \nyou gain some additional insight   into the system. Every time you automate \nsomething, you learn something new,   and you identify additional tasks that \nyou'll be able to automate in the future. And so, automation is core. It's approaching \noperations with a development mindset,   because you want to programmatically \nsolve problems so that you don't have   to go in and make the same manual \nfix time after time after time. This is key to the SRE role, and \nit's key to your success in it. And so that other 50% of the time I talked \nabout that before right, that's going to be   escalations. It's going to be on-call work or,   in some cases, for a large enough \norganization, SRE might be 24-7. It's going to include customer facing work, right? \nYou are going to have to interact with customers,   and it's going to include being the \nsource of knowledge for your group. Because SRE crosses all boundaries: it \nknows about hardware, it knows about   software, it knows about monitoring, it knows \nabout logging, it knows about automation. And so, they understand all of the different \ncomponents. They have the institutional knowledge   of how to keep the product up \nand running as a product manager. I like to make the joke that when I want \nto know how software's designed to run,   I go, and I ask the developers who wrote it. \nWhen I want to know how it actually runs,   I go, and I ask SRE because they're the ones who \nget to deal with the implementation every day. And so, bridging the gap between what \nactually happens and what we want to happen,   that's so important to the SRE job because \nthey have day-to-day hands-on interaction   with how people actually use the product. So, SRE is constantly feeding data back \ninto development so that development can   make the software better, at the same time that \nthey're automating in all of the resiliency. SRE understands that failure will happen.   Failure is just the nature of business. \nYou cannot design a perfect system. And so, what SRE excels at is \nprogrammatically identifying   potential failures and solving them ahead \nof time, and it's also good at identifying   how are we going to solve \nimmediate tactical problems. And so, I talked a minute ago about monitoring, \nright? That traditional IT room with all of the   screens. Well, monitoring and logging \nare just key to the SRT role, SRE role. So SREs, as they monitor, they're keeping track \nof what's happening in real time. Logging is an   archive of everything that's happened, so \nthat you can go back and examine it later. So, your monitoring is going to give \nyou the ability to anticipate failures   and see them coming so that \nyou can proactively solve them. Logging is when you get an unanticipated \nfailure. It allows you to go back   see what happened. You can do a an RCA, a Root \nCause Analysis , on it and figure out how to   solve it, not just for now, but for the future. \nThat gets back into the automation again, right? If you know what happened, \nand you know why it happened,   you can then adjust that monitoring that we \nwere talking about, so that the monitoring   itself will catch this edge case and you \ndon't encounter that failure ever again. So, SRE is just core to a successful business, \nand most companies will find they have a role   pretty similar to SRE today in the world \nof software in the world of technology it's   something that we already have, even \nthough we may not be calling it SRE,   but if you're talking to a startup, a very \nyoung company, they're going to say, well,   you know we don't have the budget to go out \nand develop an SRE organization to start with,   right? We only have 25 employees, we \nonly have 30 employees , and that's okay. The important part of SRE for a small company is \nnot so much having someone with that job title,   because your developers are your operators at \nthat point. It's engineering everything they do   with that SRE mindset: that failure is an option \nand, as a matter of fact, should be predicted for,   but is something that you can automate \nto solve. It's something that you can   create enough redundancy that, \nwhen failure does happen,   it's not a big deal because you're \nresilient enough that nothing goes down. And so, as long as you develop with that SRE \nmindset in mind, and you are being resilient,   you're being redundant, you are constantly going \nback and automating problems so that you don't   have to manually fix the same thing over and over \nand over again, and you're doing good root cause   analysis on actual failures so that they don't \nhappen again, and you're monitoring so that you   will know when they're about to happen and you can \nhead it off at the pass - that's really the key. Large organizations, they can afford an entire \nSRE department. They can stand it up, or they   can transition an existing operations group into \nit by empowering that operations group. Again   that 50/50 rule, spending \nhalf their time automating,   half their time fixing problems, and automating \nall of the things. Automate everything, because   the less manual work and manual intervention you \nhave the happier that SRE team is going to be. Thank you so much for your time today. If you \nhave any questions, please drop us a line below.   If you want to see more videos like this \nin the future, please do like and subscribe   and let us know. And don't forget: you can grow \nyour skills and earn a badge with IBM Cloud Labs,   which are free, browser-based \ninteractive Kubernetes labs,   that you can find more information \non by looking below. Thanks again!"
}