{
  "video_url": "https://www.youtube.com/watch?v=TiEwRiX6kGo",
  "video_id": "TiEwRiX6kGo",
  "title": "What is a Cloud Shell?",
  "upload_date": "20201002",
  "channel": "IBM Technology",
  "duration": "9:11",
  "caption": "What is a cloud shell, and how can a cloud \nshell enable rapid cloud resource management and   development from anywhere? I'm Nathan Heckman from \nIBM Cloud and I'm going to answer that today. So,   let's say you just finished \ndeveloping an exciting new app   and you decide to go on a \nwell-earned vacation. So, this is you and you're sitting on a beach enjoying yourself \nwhen all of a sudden you get a call from your boss   and they're not happy because that \napplication just went down in production.   So what do you do? You don't have your work \ncomputer with you on the beach. Enter cloud shell.   You log into one of the hotel computers, you \nopen up a web browser, and with cloud shell   you're able to fix the app in no time at all. So \nthat you can go back to enjoying your vacation   and your boss is happy. So let's compare \nsome of the benefits of cloud shell   with working with your local \nmachine. In a shell, so   with your local machine there's some limitations, \nright. So first of all, inherently you're going   to use more resources on your CPU and memory, \nit's just more resource intensive because it's   actually on your machine. You also need to worry \nabout installing software and updating software   and tools. This can be annoying, right. Everyone's \nbeen there where you're constantly prompted for   updates and you need to keep things to the \nlatest version in order to keep them working.   And finally if you're working with a cloud \nprovider you're always getting logged out   so you have to manage your authentication, \nyour tokens, etc. Well with cloud shell   it's a consistent environment. What does this mean? So first of all, all of \nyour cloud authentication is taken care of.   So you're securely authenticated to your \ncloud provider without doing anything. Also, you don't need to worry about \ninstalling tools, everything is already   installed and ready to go. And finally, maybe \nmost helpful, is there's no need to update.   So everything's on the latest version and \nyou can get started and get right to work. Another benefit of cloud shell is \nthat you can manage your cloud. So, what can you manage? Well \nyour resources and infrastructure. You can manage your applications and you can \nview logs. So, if you're sitting on a beach   open up a cloud shell you can check the status \nof your applications and get it back to working.   A final benefit of cloud shell is that \nit's a cloud based dev environment. So what does this mean for you? Cloud \nshells include all the tools that you   need to be productive as a developer. So, \ntools like git for source control management. Cloud shells typically include \nseveral languages as well.   So say you are a node developer, you \ncan use node right within a cloud shell.   And finally, cloud shells typically include an \neditor. So everyone uses or knows of vim or nano.   So you can actually edit files and scripts and \ncode right within your cloud shell environment.   Great. So now let's step back a bit \nand talk about what is a cloud shell,   what are some of the building \nblocks of a cloud shell. So, first of all, at the base of what runs \ncloud shell is a run time, or VM. This is what powers \ncloud shell at the lowest level. Next is storage. So, cloud shells may have \neither persisted or temporary storage.   Persisted meaning as you go from session \nto session, maybe you log out log back in,   you'll get your same environment and same storage. \nTemporary, obviously. It's temporary, so the   storage will be removed after some time. \nAnd finally you have the cloud shell image. And this is what you interact with, right. So, \nthis could be some bash based shell. It includes   your tools and languages. So, this is what you \nactually interact with on a cloud shell. Now of   course all of this you access from a web browser. \nSo, it's super convenient and always available.   Something to note too about cloud \nshells is that they can either be managed by you the user. And that means that you actually will provide \nthe runtime, storage, and image. So you can   configure that exactly how you want it, or a \ncloud shell can be managed by the cloud vendor. So what that means is they set up everything \nfor you, right. There's some benefits of both   with the cloud vendor managed cloud \nshell, everything's already ready to go   and cloud shell runtime, storage, image, they \nalready curate the tools and languages that   are included and can be really convenient. \nUser managed can also have some benefits too.   Maybe there's some security \nrequirements from your enterprise   about where storage needs to be located, so \nyou can actually configure that yourself.   You can also configure exactly which tools and \nlanguages you want to start up with cloud shell.   Great. So there's a few other features that cloud \nshells could include. First one is web preview.   What this is it essentially allows \nyou to preview a port on cloud shell   similarly to how you do on your local \nmachine. So maybe port 3000 or port   8080 when you're doing local development you \nget that same experience but on the cloud. The next feature of a cloud shell is, that it \nmay or may not have, is a GUI based editor. Now pretty self-explanatory, \nthis is rather than a text editor   like a Vim or Nano, it's actually a GUI where \nyou can go in and edit files or scripts,   it may even have a debugger. It can be very \nuseful when you're developing with cloud shell. And finally, cloud shells could have file upload or download. So, also pretty \nself-explanatory, it allows you to actually   upload files from your local computer to \nthe cloud shell environment, so that if   you go to somewhere else some other computer or \nworkstation you can see those same files there.   It is also for file download, you can \ntake files or scripts from cloud shell   environment down to your local machine and \ncontinue development there if you so choose.   So that's what cloud shell is and those are some \nof the benefits. As you can see cloud shell is a   powerful consistent environment, it's your own \npersonal workspace on the cloud. Thank you.   If you have questions please drop us a line \nbelow. If you want to see more videos like   this in the future, please like and subscribe. \nAnd don't forget, you can grow your skills and   earn a badge with IBM CloudLabs which are free \nbrowser-based, interactive Kubernetes labs."
}