{
  "video_url": "https://www.youtube.com/watch?v=j64WdNBqoWk",
  "video_id": "j64WdNBqoWk",
  "title": "No code change approach to confidential computing",
  "upload_date": "20210817",
  "channel": "IBM Technology",
  "duration": "6:36",
  "caption": "- Hello, I am Pratheek\nKarnati, Security Architect for IBM Cloud. Today we are going to look\nat IBM Cloud Data Shield and how it enables you to protect your containerized applications\ndata in use or in memory. We are going to see this\nin action with the help of a demo application we\nbuilt called Cloud Fund. But first, let's talk\nabout data protection. We believe it requires protection of data throughout its life cycle. In transit, at rest, and also in use. And we have been on a\nmission to address that with confidential computing\nwhich protects data in use by performing computation in hardware-based trusted\nexecution environment. And Data Shield, is a deployment time tool that helps you adopt\nconfidential computing on x86 platforms. Specifically, Intel\nSoftware Guard Extensions with no code changes. Let's see how this works. Cloud Fund is a Python app\nwe built for this demo. And yes, we Data Shield power\nby Fortanix Runtime Encryption in addition to C/C++. We also support Java, Python\nand RUST runtimes on SGX. Cloud Fund is a containerized application running on Kubernetes, Cloud Fund is a typical\nthree-tier application with a UI, backend API and a database. For the database, we are using\nconfidential database service from a portfolio called\nHyper Protect MongoDB. So it is very secure. For this demo, let's focus\non the threat vectors that come at the backend API layer and how it privileged\nuser infrastructure admin, for example, with no access\nto database can steal sensitive data from the\nbackend API's memory. As a narrative element for this demo, we are using Cloud Fund to\ndonate money to a charity. Let's see how it works. So I open the Cloud Fund\napplication in the browser. I click donate now. Here I'm giving the\ndetails and importantly, I'm giving the personal information and also the credit card number. And the expiration date and\nthe CVV and click submit. Now the data goes through the backend API. Now let's see how it privileges\nthat attack and play out. Here I'm logged into the\nserver as privileged user. So how my terminal open. I'm trying to log into\nthe workload in question, once I'm in there, let's\nfind the processing question. The Python app I was talking about. Once I have that, let's find a PID. Once I have that let's memory dump it. Now let's look for strings\nin the memory dump. That's a lot of data\nlet's ask for my name. As you can see, this is a problem. This application is vulnerable\nto privileges that attacks targeting its memory contents. Now let's see how you can\nprotect your applications data and use the Data Shield. Let's take a look at Data\nShield documentation. You start your journey in\nthe getting started page. One of the first things you\ndo is you have the right cluster. The right worker node. And you run a couple of\ncommands for prerequisites and you install Data Shield\nthrough this helm shot. The places value for the\nchart name, your email ID, account ID on English subdomain. And you get your dedicated\nsingleton instance of Data Shield running\nnatively on your cluster. Now let's look at the UI. You log into the UI using IBM token. Once your in there, you can manage your worker nodes and look at the attestation reports. You can create apps and\nbills for your pipelines. You can create tasks so it\ncan approved or denied build. On the user section, you\ncan add your teammates or you can manage them. Now let's go back to the\napplication and see how easy it is to convert your application\nfrom its current state to runtime memory encrypted counterpart. Since Data Shield is a\ndeployment time tool, you don't have to make\nany changes to your code. You make this API code from\nyour CICD pipeline prior to deployment of your application. Replaces values here with your\napplication container name and the new name for the new\nSGX capable image we create for you. When you call this API\nsince it gives Data Shield, read-write privileges to\nyour container registry at installation. Data Shield pulls the\ncurrent image converts and packages to SGX capable counterpart and pushes the new image\nback to your registry. Now you continue with your CD process and deploy your new runtime\nmemory encrypted backend API. Let's look at the changes you\nmake to the YAML real quick. As you can see, all we need\nis a couple of volume mounts for SGX drivers. You can find an example of\na YAML in our documentation. Let's go ahead and deploy\nthis new backend API and perform the same steps as earlier. I'm on the terminal, I'm\ndeploying the new API. Once it's up, let's go to the\nbrowser under the same steps as before. I'm in the Cloud Fund, I'm donating to Cloud Fund,\nI gave my name, my address, my telephone number, my credit card number and my expiration date and\nthe CVV and click submit. Now let's go back to the terminal again and try to scrape for\ntext in the memory dump of this process. Here I am in the worker node. I'm trying to search for\nthe process here on the PID. Once I have the PID lets\nmemory dump the process. Once we memory dump it, let's scan for plain\ntext in this memory dump and to make it easier,\nlet's give him a name. But you see nothing because\nthe memory is encrypted. There you have it. In about five minutes,\nyou go from an application that is vulnerable to a\nruntime memory encrypted counterpart. Data Shield helps you and\nyour team do what you do best developing stellar apps. Data should takes the burden\noff from the development to the deployment time on how\nto protect your sensitive data in memory without any code changes. Please give IBM Cloud Data Shield a try and reach out if you have any questions. Thank you."
}