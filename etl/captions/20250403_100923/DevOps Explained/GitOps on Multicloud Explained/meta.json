{
  "video_url": "https://www.youtube.com/watch?v=tQtni2st3xo",
  "video_id": "tQtni2st3xo",
  "title": "GitOps on Multicloud Explained",
  "upload_date": "20211019",
  "channel": "IBM Technology",
  "duration": "5:26",
  "caption": "do you want your multi-cloud deployments to be boring or like a roller coaster i'm chris lozaro from ibm and i'm going to talk to you about gitops for multi-cloud but before i do that please be sure to like and subscribe the approach we're going to talk about today is simple consistent and secure now typically when [Music] customers are building applications they start out with an on-prem environment and they have a gui and a cli for managing that environment but then they want to move to the cloud and utilize cloud environments so they start using a cloud and it has its own gui and its own cli and things get a little bit more complicated and now they have hybrid cloud apps that are stretching across on-prem and cloud and these different environments can be difficult to manage but the advantages of cloud are there and so they continue and now they add additional clouds in order to have the flexibility to move their applications from one cloud to the next or use multiple clouds for different purposes so now you've have gui and cli across your on-prem your first cloud and any other cloud that you're using and things start to become pretty difficult now open openshift helps openshift provides a secure consistent way of managing your infrastructure and applications no matter whether they're on-prem or in the cloud but we're going to take things a step further and show how git ops can really manage everything through git operations so you have your dev team and they are used to doing all of their work inside of git so source code is all managed within git and you have your ops team and they're in charge of managing all of your different environments so how do we bring dev and ops together well we can set up repositories for infrastructure for services and for the applications so when we go and look at your deployed environments your dev your test and your prod environments can all be managed in your infrastructure repo and then when you start deploying services that your application depends on things like a messaging service that can be managed as well in the services repo and then the application itself you've got your application the source code continues to be managed in the application repo so when you deploy that you've got your front end and your back end that again is all managed in get and so rather than using the different management consoles when you check into git you've got tools that are automatically ensuring your git environment manages and matches your production environment so as changes are made over here they get deployed and mimicked over here so that they match now one funny story is when we were demoing this to a customer we started setting up this whole environment and so we had our git repo but git is pretty boring to demo no one wants to see a pull request and we started showing openshift but no matter where we were whether we're on-prem in our one cloud or another cloud openshift looked exactly the same so we started to pull up the individual management consoles and we realized we don't even have access to the third-party management console the team that was setting this up was using a shared account that had been locked down so even even demoing this stuff we were showing the value of gitops because it was very secure in the fact that we didn't even have access to show those management consoles so get ops is an approach that's simple consistent and secure for managing your environments you don't have to be like a roller coaster you can have boring deployments across multi-cloud thank you if you have any questions please drop us a line below and if you want to see more videos like this in the future please like and subscribe"
}