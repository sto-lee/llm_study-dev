{
  "video_url": "https://www.youtube.com/watch?v=TWxKD9dLpmk",
  "video_id": "TWxKD9dLpmk",
  "title": "What is Tekton?",
  "upload_date": "20191121",
  "channel": "IBM Technology",
  "duration": "6:49",
  "caption": "Hi, my name's Matthew Perrins. I'm part of the IBM Cloud team and today I'm going to give you an introduction to Tekton. So, what is Tekton? Tekton started life as part of the Knative Project as they were trying to solve specific problems around how they do continuous\nintegration and continuous delivery of their software components, and was later donated to the Continuous Delivery Foundation where we're now being able to use it and consume it across multiple Kubernetes environments and platforms. So, what I want to do today is give you an overview of the base concepts that underpin what Tekton is on, explain about how you run it inside a\nKubernetes environment, and how it helps you automate and deliver your software components for running inside that platform. And then I want to give a brief explanation of how developers would consume it and work with it and how that separation of concerns may go forward. So, base level component of a\nTekton continuous integration or delivery pipeline is something called a\ntask. And a task is an automation task, yeah an automation tasks that you need\nto create that will help you build, test, deploy, manage, check the health of a\nparticular piece of software. Once you create a number of tasks you can\nactually isolate them and reuse them very easily and Tekton one of the real\nbenefits is that it allows you to separate your tasks that are then\nconsumed by your developers and I'll explain that in a little bit more detail\nas we move forward. So, once you've got a base element task you can create\nsomething called a pipeline and a pipeline can be made up about any number of tasks so you can customize that and tailor it\nfor the specific software needs that you have. Once you've defined a pipeline you\ncan trigger a pipeline from something called a pipeline run, and you create\nmultiple runs in a software delivery project but it will continue to run the\nexact same definition of the pipeline that you defined with the exact same\ndefinition of the task that you define. Now one of the next pieces of key\ninformation to make this sequence run smoothly is you need to provide some\ndata for that execution so that you can tailor and customize it. Anything from a\nbuild number to supplying a unique git repository or supplying a Docker image\nand this is called Pipeline Resource Res. So, now we built\nthese base components for a Tekton Pipeline what we need to do is then\nstart to think about how we prepare a developer to consume them. So, what you would typically do is you'd register your common tasks into your Kubernetes\nenvironment inside the Tekton Execution Engine that you will install inside Kubernetes, and those tasks can be commonly shared across different applications or\ndifferent development teams. So, it allows a level of management and control that\ncan be owned by the operation, the operations side of your DevOps\norganization. So, Tekton itself runs inside the Kubernetes cluster and it\nassociates very cleanly to a lot of the Kubernetes concepts like pods and\nservices and CRD, CRC, YAML definitions. So, once you've got your pipelines defined\nor the concepts about how you're going to use your pipelines and once you've\nactually installed and got Tekton running inside your Kubernetes environment,\nwhat we need to do is then talk about how a developer\nwould start using that in the creation and delivery of their projects. So, as I\nmentioned you can have different Tekton pipeline definitions and we'll call that\npipeline YAML and you can define that file inside your individual application\nand the relationship if you remember is a pipeline can run any number of tasks\nand these tasks have been already registered and defined inside the Tekton\nenvironment. So, you can have task 1, task 2, task 3, and keep going,\nand within each task you can have a number of steps and again you can have\nany number of steps depending on the particular problem you're trying to\nsolve. So once you've defined your pipeline\ndefinition inside your application then the developer can push their change to\ntheir Git Repository and this will allow them to iterate multiple times on code\nchanges or definition changes or feature and function improvements. And what\nhappens is this triggers a webhook which will then trigger a type a Tekton\nexecution which will then marry the two elements together, it will marry their\npipeline definition that comes from the application and it will take the tasks\nthat you've defined inside your Tekton environment and this could result and we\nhope it does successful delivery of your applications into specific namespaces,\nwhether it be a dev, a test, or a pre-prod. So, you've actually packaged up your code\ninto a K8, a K8 image registry and from there you've now got a piece of packaged\nsoftware that you can then roll out and deploy to other environments. So, I hope\nyou enjoyed that walkthrough and you've got some information about the\nbasic concepts of what Tekton is, how applications can use it, and how\nyou run it on top of the Kubernetes platform. Thank you if you have any\nquestions please drop us a line below. If you want to see more videos like this in\nthe future, please like and subscribe and don't forget you can always get started\non the cloud at no cost by signing up for a free IBM Cloud account."
}