{
  "video_url": "https://www.youtube.com/watch?v=3kGFBBy3Lyg",
  "video_id": "3kGFBBy3Lyg",
  "title": "Hybrid Cloud Explained",
  "upload_date": "20181214",
  "channel": "IBM Technology",
  "duration": "6:35",
  "caption": "Hi everyone, my name is Sai Vennam, and I'm a developer advocate with IBM. Today I want to talk about hybrid cloud. If you're watching this video then you're probably tasked with the very important role of figuring out how hybrid cloud fits in with your company's architecture. Or maybe you're just a little bit curious about this cloud computing approach. Either way, essentially, hybrid cloud boils down into a mixture of a private, as well as a public, environment. And essentially the two are working in tandem to run your workloads and applications. To better explain hybrid cloud, I want to start with an example. Let's say we've got a fictional company, \"Acme Freight\", who is essentially tasked with running shipments. Acme Freight has an existing on-premises application, an ERP application - which many people might be familiar with, is an \"Enterprise Resource Planning\" app, which enables them to manage their shipments, and make sure that they make it there on time. But let's say that this ERP application is made up of 3 major sections. We've got the BFF (Back-end For Front-end). In the middle here we've got the chunk of the ERP application that runs things like inventory, truck drivers, deliveries, shipments, that kind of thing, and we've got, at the bottom here, a user registry - human resources, that kind of thing. So the BFF is going to basically handle any time front-end requests are made to make sure that web dashboard looks great. But Acme Freight has just created a new mobile application that needs a new BFF application to actually serve those endpoints so to do that, the team decided to create a new BFF layer on the public side. So, they've started with a new public cloud and they've decided to deploy the back-end for this mobile application on this cloud. So, we've got the mobile BFF application here. So, the main thing to keep in mind here, so only the mobile BFF application is running in the public cloud. So, they still need a way for this to interact with the existing ERP app. To do so, they'll simply open up a tunnel that allows the mobile BFF application to work with those private endpoints that the ERP application serves. So, that's one of the key tenets of a hybrid cloud environment is the fact that they must be interoperable. Essentially meaning that the public components and the private components are working in tandem. So, so far, the truck delivery drivers are loving this new infrastructure. They're able to use their mobile apps to submit whenever a delivery is made. But, what they've noticed is, during the holiday season or peak hours, this whole system is bogging down and it's leading to deliveries that are late and shipments that are being missed. To tackle this, Acme Freight decides, \"You know what? It's about time.\" \"We need to start breaking this monolith down.\" So, they decide to move the ERP portion, the big chunk, break it apart into microservices and move it to a public cloud. To do so, they take advantage of Linux container technologies, things like Docker, as well as container orchestration management tools like Kubernetes, and, successfully, they move that ERP layer to the public cloud. Not an easy task. So, we can imagine that there's a number of microservices that represent that ERP application that are running in a public cloud. And they're working with Docker technology and Kubernetes technology, keeping everything orchestrated and scaled out. That's one of the great things about taking advantage of a public cloud, is that there are seemingly endless public resources to to scale out your application. So, although they get to keep their existing on-premises ERP architecture, they start moving to the public cloud and take advantage of the scalability and the capabilities that are offered there. Another advantage of working with the public cloud - you're no longer locked into a specific vendor. Traditionally, with monolithic applications, maybe you're working with a Java EE stack, You're forced to use the capabilities that the stack allows you to use But with public cloud you can go \"window shopping\" - there are lots of open source projects out there, programming languages that you can use, and with micro-services speaking on public interfaces all of those services can talk to one another regardless of the technology that they're written in. So, definitely, by taking advantage of the public cloud, they get to use cool third-party services. So, Acme Freight decides, \"You know, we can do better with delivery rerouting whenever there is a snowstorm or inclement weather,\" and, so to do that, they hook up this ERP application to Watson and take advantage of some of the cognitive capabilities to power delivery rerouting. So, effectively, where they were taking advantage of the portability features offered by taking on a hybrid cloud architecture. The last thing I want to touch on is security. Although Acme Freight moved over the mobile BFF piece as well as the ERP application and to micro services - and, you know, in a perfect world, maybe they've even phased out these two portions, they continue to keep the user registry on premises because that's something that they want to keep firewalled - they want to keep it completely secure and always on their own infrastructure and hardware. That's one of the great advantages of hybrid cloud is that they can continue to keep certain resources firewalled and on-premises, while taking advantage of the public cloud to continue to run their applications and workloads. So, together, hybrid clouds you get the features of interoperability scalability, portability, as well as security. All of these come together to enable developers and companies to take advantage of the best of both worlds when running their applications. If you want to learn more about hybrid cloud, check out the accompanying links or the IBM cloud blog."
}