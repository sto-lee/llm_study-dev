{
  "video_url": "https://www.youtube.com/watch?v=nQ8AianmcPk",
  "video_id": "nQ8AianmcPk",
  "title": "What's new in Red Hat OpenShift 4.3?",
  "upload_date": "20200424",
  "channel": "IBM Technology",
  "duration": "4:27",
  "caption": "Red Hat OpenShift is the enterprise\nKubernetes platform, and with the latest version, OpenShift 4, the platform has undergone significant improvements to developer experience, automation, and the management of the platform itself. But what exactly changed, and what do you need to know about OpenShift 4? Let's get started. So, OpenShift is Kubernetes at the core, and with OpenShift 4, the platform is now driven by Operators. Yes, this includes the services that support OpenShift, as well as app services that are deployed by users like you. This is significant. So, we'll start with covering Operators. Next, we'll jump into one of the first things users will notice in OpenShift 4 - that is, an improved developer experience. And this comes with significant updates to the console. And then finally we'll dive into some of the community-driven projects that OpenShift has adopted into supported solutions. Things like OpenShift Service Mesh and OpenShift Pipelines. There's actually more but we'll touch on these two today. Starting with Operators, essentially they\nallow you to automate the lifecycle of containers. Let's say I'm deploying a\nsimple front-end and back-end application. Once I deploy all of them\ninto my cluster, I've got to manage all the automation or on the config of\nindividual applications, but with an Operator I can take a different approach.\nBy installing an Operator into a cluster with OLM, or Operator Lifecycle Manager, I can enable new CRDs, or Custom Resource Definitions. These CRDs allow me to\nmanage my application using custom config files tailored from my\napplication. In addition, any automation that I need can be built into the\noperator itself. Essentially I've extended the Kubernetes API to create\nnew custom resources that are tailored to the resources that you regularly work\nwith. In OpenShift 4, the services that make up OpenShift itself are actually\nmanaged by Operators. This means we get to take advantage of that same framework to easily do installation and upgrades of OpenShift itself. Check out the\nOperator SDK to create your own Operators, or use the embedded Operator\nHub and OpenShift to start quickly and with\nexisting solutions. Next let's talk about one of the first things you'll notice in\nthe platform and that is an improved developer experience starting from the\nconsole. The main thing you'll notice is a\ndifferent view for administrators and developers. There's new dashboard\ncapabilities for streamlined deployment of applications, whether you start with a\ngit repo, container image, or deployment YAML. In addition, you'll get better\nobservability into the platform. For example, there's an advanced view which\ntracks everything happening in your cluster. There's improved administration\nof the cluster itself, with a new user manage section as well. Lastly, let's\nclose with some of the community driven projects that OpenShift is supporting. One\nof them is going to be OpenShift Pipelines with Tekton. Tekon is a\ncloud native way to declare CI/CD pipelines and it's based entirely on\nKubernetes. It starts with defining the tasks that make up a CI/CD flow, which\nactually run as pods in your cluster. These make up a pipeline and that's able\nto deploy applications into your cluster. In OpenShift there's actually UI\nintegration between Tekton and OpenShift. So, OpenShift Pipelines lets you\nmanage your CI/CD all in the dashboard. The other community-driven project I\nwant to talk about is OpenShift Service Mesh. This is based on Istio.\nImagine you have a number of services that are dependent on one another, a\nnumber of concerns arise in the interaction between these services. How\ndo you actually manage these interdependent complexities? Well instead\nof managing them in the app itself, you can take advantage of the Istio Control\nPlane which uses \"sidecars\" to basically help you control how these microservices connect with each other, how they enforce policies, and then even\nobserve how they behave. That way the capabilities rest on the control plane\nrather than the apps themselves. Thanks for joining me for this quick video overviewing some of the newest features in\nOpenShift 4. As always, if you like the\nvideo or you have any comments, please drop a like or a comment below. Be sure\nto subscribe and stay tuned for more videos like this in the future."
}