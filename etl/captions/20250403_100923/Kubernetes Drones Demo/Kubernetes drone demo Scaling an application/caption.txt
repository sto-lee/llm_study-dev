[Music] scaling an application with kubernetes is done with replica sets replica sets ensure a specified number of pods are running at any given time replica sets are considered a low-level type in kubernetes and are managed by our deployment object which we defined in the configuration file specifying the number of replicas under the deployment in our llamo file will create a replica set and the pods it manages to increase the replicas of our app running in our coop cluster we change the value in our configuration yamo file and reapply it let's say we need to change to three replicas to handle the daily demand of our online travel service this results in kubernetes creating two more pods and as expected two more drones take off kubernetes uses the declarative model with our deployment configuration we defined a desired state for our application kubernetes constantly monitors our pods and acts to match our configuration so in addition to handling expected demand on our application the replica sets defined in our configuration can also serve as a blueprint for auto-recovery why don't we see what happens when a pod goes down q brunette EES knows that it has to start another pot to scale back down we can just modify our configuration and reapply how would our system handle traffic burst automatically to be able to scale more dynamically we need Auto scale kubernetes offers a horizontal pot autoscaler which can automatically scale the number of pods in the replica set based on the policies the user defines we can define a scaling policy with a minimum and maximum number of pods to run based on demand for the application another way of talking about scaling an application is in terms of availability and how we distribute our application pods across the infrastructure assigned to our cluster it makes sense to cover that next you