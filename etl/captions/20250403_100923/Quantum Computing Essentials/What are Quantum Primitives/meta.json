{
  "video_url": "https://www.youtube.com/watch?v=kyLi8Gswpxo",
  "video_id": "kyLi8Gswpxo",
  "title": "What are Quantum Primitives?",
  "upload_date": "20221027",
  "channel": "IBM Technology",
  "duration": "3:16",
  "caption": "what if you could simplify how you use a quantum computer so you can concentrate on the higher level applications that you actually care about in this video we're going to be talking about Quantum Primitives which will hopefully help you accomplish this earlier videos we looked at how to program a quantum computer the basic building block for this is a Quantum circuit which looks something like this the quantum circuit is basically at the same level as Assembly Language for a classical computer in fact the open Chasm language is just that it is an assembly language that lets you write a Quantum circuit in code similarly when you run your Quantum program on a quantum computer you get a low level result out something that looks like this one key area that makes Quantum Computing different than classical Computing is that it's probabilistic or when you have a fixed input you can get different outputs so we run the Circ circuit or program multiple times and the output is the number of times you got each result however when you're writing higher level applications this is too level to typically work with and you want to deal with higher level constructs such as probability distributions or expectation values which are estimates of observables this is where Quantum Primitives come into play Quantum primitive is basically just a black box abstraction where you give it your Quantum circuit input and you get the output at the higher level that you actually care about inside the primitive all the details on how you compute this higher level output and all of the pre and post processing that are necessary to compute it are abstract it away from you you previously and still can do this manually if you so desire but the Primitive greatly simplifies how you do this then vendors of quantum computers like IBM provide implementations of these Primitives which provide the most efficient software and Hardware techniques to leverage the Primitive to get the result the best result that you want if you're writing a higher level application where you have a classical Optimizer that works with these higher level results this greatly simplifies how you write the application because you don't have to worry about the intermediate computation you just have to deal with how you build this higher level application hopefully this shows you how you can use quantum Primitives to accelerate developing higher level applications there are more details and links for this in the description below please don't forget to like And subscribe and if you have any questions please leave a comment below thank you"
}