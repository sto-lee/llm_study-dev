{
  "video_url": "https://www.youtube.com/watch?v=vxJobGtqKVM",
  "video_id": "vxJobGtqKVM",
  "title": "What is Serverless?",
  "upload_date": "20201211",
  "channel": "IBM Technology",
  "duration": "6:42",
  "caption": "Hi, I'm Ashher Syed with the IBM Cloud team. Today, I'm going to discuss serverless, but first, let's define what serverless actually means. Does it mean that there are no servers involved? The answer is no, obviously. What it means is that you're not responsible\nfor managing and provisioning of these servers, it's sort of outsourced to the cloud provider\nwhereas you are as a developer focused on writing code or business logic. And our deployment models have been\nevolving over the years, so let me walk you through how we have gone to where we are on\nthe serverless and the journey behind that. So, on the Y axis you see increasing business\nfocus on logic, that means you're concerned more about writing code and less about\nthe underlying infrastructure. And on the X axis, you're seeing\ndecreasing stack implementation. What that means is you are in less\ncontrol of what goes behind the scenes when you deploy your code or write your code. So, first we start off at bare metal. Bare metal you were managing and\nconfiguring these servers and the environment that you want to deploy your code on. That means you are responsible for installing\nOS, all the patching and everything. So, quite time consuming to\nfigure out that environment. Next, we move to virtual machines. Resource optimized from the bare metal where\nyou were handling idle times much better. But at the same time, you're still responsible\nfor setting up your environment; again, installing O/S and patching and everything. Down the road, we move to containers. Actually, Docker popularized this idea. Essentially what you're doing is you are\npackaging your deployment code, application code and all of its dependencies into\na single container which could run on any underlying infrastructure. It simplified a lot of things from the\ndeployment point of view but at the same time, some challenges with containers\ncould be when you scale up your apps, management of containers becomes a challenge. At any given time, your application\ncode is at least running on one server, so you still have some idle time. Then we move to serverless\nwhich is where we are now. And in this, like I said earlier, in this\nmodel you are sort of abstracting from all of the underlying infrastructure and you're\nfocused mainly on writing business logic. Let's look at how this serverless\nactually works. All of the major cloud providers\nhave this Functions as a Service. This is essentially a compute platform for\nserverless where you run your functions -- functions are, just again, single\nunit of deployment of your code, you could say it like a file\nprocessing as an example -- which is run by events which I called by events. Events are anything, think of it as a click of\nbutton the user has, and it creates an event which calls a function and\nthen you run your code. And in this serverless Function as a Service\nenvironment you have event driven architecture which is, again, an ecosystem provided by cloud\nprovider which has different services running like database, IoT depending on\nhow you want to build your app. So, those, all of them are emitting\nthose events and you build your app, you look for those events and\nprogram that into your code. And again, like any other platform, some of\nthe drawbacks of serverless would be timeouts, you know, these are stateless containers,\n[they] spin off for a little bit of time and are deleted afterwards. So, if your execution code does not\nfinish in that time, your app could fail. And then, you can also run into\nsome latency issues depending on how time sensitive you want your app. So, let me illustrate that into an example here. So, for example, a user comes here\non a client side and uploads an image and press a button to submit,\nit creates an event. So, an event calls a function or invokes\na function which does the resizing of that image and it stores into storage. So, this is just a very over simplified\nexample of how Function as a Service works and how you build your apps in that\nenvironment, serverless environment. So, let's look at some of the benefits. You pay for execution only. What that means is there's no idle time. So, like in previous cases where you were always\nmaintaining a capacity or you're provisioning for different scenarios that you\nalways had something running. Here, when your function is running, that's\nthe only time you are paying for that and its very cost efficient and functions\nusually run at 100 milliseconds of times. So, auto scalables. That's a responsibility taken\nby a cloud provider again. When you architect your apps, you're\nnot provisioning for any of that, you are less concerned with the resources. Faster time to market. Again, since you're not responsible for\nany of the management and deployment of any of the underlying infrastructure,\nyou can build your apps faster, solve customer problems and\nbring them to market. Polyglot environment. So, like others, I mean, Function as a\nService allows you, you can write any language and frameworks that you are comfortable with. A lot of cloud providers have multiple languages\nthat they support, so it could be very helpful in cases where you are comfortable with\none language, you want to write in that. So, that's totally okay in\nthe serverless environment. Last but not the least is all of the\nserverless apps are highly available. What that means is that cloud provider takes\ncare of all the fault tolerance and the MZRs -- Multi Zone Regions -- that they build to make\nsure that your app is always up and running. And all the services that you're using in event\ndriven architecture are also fault tolerant, so your app overall is always highly available. Thank you for watching the video. If you have any questions,\nplease drop us a line below. If you want to see more videos like this\nin the future, please like and subscribe. And don't forget, you can always\nget started on the cloud at no cost by signing up for a free IBM Cloud account."
}